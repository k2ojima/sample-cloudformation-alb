AWSTemplateFormatVersion: '2010-09-09'
Description: ALB arch for testing
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: test-web
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  SiteDomain:
    Type: String
Resources:
  TestApCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref SiteDomain
      ValidationMethod: DNS
  TestApVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/20
      EnableDnsHostnames: true
  TestApIGW:
    Type: AWS::EC2::InternetGateway
  AttachTestApIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref TestApIGW
      VpcId: !Ref TestApVPC
  TestApSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: test security group
      VpcId: !Ref TestApVPC
  TestApSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.11.1.0/24
      VpcId: !Ref TestApVPC
  TestApSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.11.2.0/24
      VpcId: !Ref TestApVPC
  TestApSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1d
      CidrBlock: 10.11.3.0/24
      VpcId: !Ref TestApVPC
  TestApInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref TestApSubnetA
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !GetAtt TestApSG.GroupId
    Metadata:
      Comment: Install a simple app
  TestApInstanceC:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref TestApSubnetC
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !GetAtt TestApSG.GroupId
  TestApInstanceD:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref TestApSubnetD
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !GetAtt TestApSG.GroupId
  TestApALBTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: test-ap-alb-target
      Port: 80
      Protocol: HTTPS
      VpcId: !Ref TestApVPC
  TestApALBFrontListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref TestApALB
      Port: 80
      Protocol: HTTP
  TestApALBSSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TestApALBTarget
      Certificates:
        - CertificateArn: !Ref TestApCertificate
      LoadBalancerArn: !Ref TestApALB
      Port: 443
      Protocol: HTTPS
  TestApALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: test-ap-alb
      Subnets:
        - !Ref TestApSubnetA
        - !Ref TestApSubnetC
        - !Ref TestApSubnetD
Outputs:
  VPC:
    Value: !Ref TestApVPC
  SubnetA:
    Value: !Ref TestApSubnetA
  SubnetC:
    Value: !Ref TestApSubnetC
  SubnetD:
    Value: !Ref TestApSubnetD
  InstanceA:
    Value: !GetAtt TestApInstanceA.PublicIp
  InstanceC:
    Value: !GetAtt TestApInstanceC.PublicIp
  InstanceD:
    Value: !GetAtt TestApInstanceD.PublicIp