AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 and ALB Settings
Metadata:
  Author:
    Description: xentok

Parameters:
  EnvType:
    Description: Environment where the stacks are applied.
    Type: String
    Default: test
    AllowedValues: [test, stage, prod]
    ConstraintDescription: must be one of test, stage, prod
  # stack names
  NetStack:
    Description: The network stack name.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: test-web
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
          t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
          m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
          m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
          c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
          g3.8xlarge,
          r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
          i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
          d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Type: AWS::EC2::Image::Id

Conditions:
  UseStageEnv:
    !Equals [!Ref EnvType, stage]
  UseProdEnv:
    !Equals [!Ref EnvType, prod]

Resources:
  # IAM Policy
  LoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-${AWS::Region}-Logging
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*

  # IAM Role
  ApInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref LoggingPolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Instance profile
  ApInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ApInstanceRole
    DependsOn: ApInstanceRole

  # EC2 Template
  ApEc2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName

  # Instances
  ApInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ApEc2LaunchTemplate
        Version: !GetAtt ApEc2LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          GroupSet:
            - Fn::ImportValue: !Sub ${NetStack}-ApSGID
          SubnetId:
            Fn::ImportValue: !Sub ${NetStack}-SubnetA
      IamInstanceProfile: !Ref ApInstanceProfile
  ApInstanceC:
  # ToDo : EnvType=stageを指定した時に2台構成にしたい
    Type: AWS::EC2::Instance
    Condition: UseProdEnv
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ApEc2LaunchTemplate
        Version: !GetAtt ApEc2LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          GroupSet:
            - Fn::ImportValue: !Sub ${NetStack}-ApSGID
          SubnetId:
            Fn::ImportValue: !Sub ${NetStack}-SubnetC
      IamInstanceProfile: !Ref ApInstanceProfile
  ApInstanceD:
    Type: AWS::EC2::Instance
    Condition: UseProdEnv
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ApEc2LaunchTemplate
        Version: !GetAtt ApEc2LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          GroupSet:
            - Fn::ImportValue: !Sub ${NetStack}-ApSGID
          SubnetId:
            Fn::ImportValue: !Sub ${NetStack}-SubnetD
      IamInstanceProfile: !Ref ApInstanceProfile

  # Application Load Balancing
  ApALBTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${NetStack}-VPC
      HealthCheckPath: /
      Targets: !If [UseProdEnv, [
            {Id: !Ref ApInstanceA, Port: 80},
            {Id: !Ref ApInstanceC, Port: 80},
            {Id: !Ref ApInstanceD, Port: 80}
          ],
          [{Id: !Ref ApInstanceA, Port: 80}]
        ]
  ApALBFrontListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApALB
      Port: 80
      Protocol: HTTP
  ApALBSSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApALBTarget
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub ${NetStack}-ACM
      LoadBalancerArn: !Ref ApALB
      Port: 443
      Protocol: HTTPS
  ApALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      LoadBalancerAttributes:
        - Key: routing.http2.enabled
          Value: 'false'
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetStack}-ALBSG
      Subnets:
        - Fn::ImportValue: !Sub ${NetStack}-SubnetA
        - Fn::ImportValue: !Sub ${NetStack}-SubnetC
        - Fn::ImportValue: !Sub ${NetStack}-SubnetD

Outputs:
  PublicIpA:
    Value: !GetAtt ApInstanceA.PublicIp
    Description: Public IP of the instance that AZ is ap-northeast-1a
  PublicIpC:
    Value: !GetAtt ApInstanceC.PublicIp
    Description: Public IP of the instance that AZ is ap-northeast-1c
    Condition: UseProdEnv
  PublicIpD:
    Value: !GetAtt ApInstanceD.PublicIp
    Description: Public IP of the instance that AZ is ap-northeast-1d
    Condition: UseProdEnv